def buf_archive(name:str, srcs:list):
    return genrule(
        name = name,
        srcs = srcs,
        cmd = ["$TOOLS_ARCHTOOL t"],    
        tools = {
            "ARCHTOOL": [CONFIG.ARCAT_TOOL],
        },
        outs = [
            f"{name}.tar.gz",
        ],
        requires = ['buf_image'],
    )


def buf_build(name:str, srcs:list, json=False, deps:list=[], visibility:list):
    return filegroup(
        name = name,
        srcs = srcs,
        visibility = visibility,
        deps = deps,
        provides = {
            'buf_image': buf_image(
                name = f'_{name}#buf_image',
                srcs = srcs,
                json = json,
                deps = deps,
                visibility = visibility,
            ),
        }
    )

def buf_image(name:str, srcs:list, json=False, deps:list=[], visibility:list):
    """
    builds the buf image using `buf build` and includes google protos.
    if json is true we generate a .json output instead of a .bin
    """
    ext = 'json' if json else 'bin'
    bufYaml = genrule(
        name = f'{name}#buf_build',
        tools = {
            "buf": CONFIG.BUF.BUF_TOOL,
        },
        outs = [
            "buf.yaml",
        ],
        cmd = "$TOOLS_BUF mod init",
    )
    outs = f"{name}_buf_image.{ext}".replace("#", "_")
    return genrule(
        name = name,
        srcs = srcs + [
            bufYaml,
        ],
        cmd = [
            f"$TOOLS_BUF build -o {outs}",
        ],
        tools = {
            "buf": CONFIG.BUF.BUF_TOOL,
        },
        outs = [
            outs,
        ],
        labels = [
            f"link:plz-out/gen",
            f"link:.",
        ],
        visibility = visibility,
    )

def buf_breaking(name:str, srcs:list, against:list, visbility:list):
    pass


def buf_toolchain(name:str, revision:str, visibility:list):
    if CONFIG.HOSTOS == "darwin":
        HOSTOS = "Darwin"
    elif CONFIG.HOSTOS == "linux":
        HOSTOS = "Linux"
    elif CONFIG.HOSTOS == "windows":
        HOSTOS = "Windows"
    else:
        HOSTOS = CONFIG.HOSTOS


    if CONFIG.HOSTARCH == "amd64":
        HOSTARCH = "x86_64"
    else:
        HOSTARCH = CONFIG.HOSTARCH

    return remote_file(
        name = name,
        binary =  True,
        url = f"https://github.com/bufbuild/buf/releases/download/{revision}/buf-{HOSTOS}-{HOSTARCH}",
        extract = False,
        visibility = visibility,
    )


def bsr_deps(name:str, urls:list, visibility:list):
    return filegroup(
        name = name, 
        srcs = [],
        visibility = visibility,
        provides = {
            'buf_dependencies': gen_buf_deps(name=name, urls=urls, visibility=visibility),
        },
    )


def gen_buf_deps(name:str, urls:list, visibility:list):
    cmd = [f'$TOOLS_YQ -i ".deps = [\\"{u}\\"] + .deps" buf.yaml' for u in urls]
    
    return genrule(
        name = name,
        visibility = visibility,
        cmd = [
            f"touch buf.yaml",
            f'$TOOLS_YQ -i ".version = \\"v1\\"" buf.yaml',
        ]+cmd + [
            f"mv buf.yaml buf.{name}.yaml",
        ],
        outs = [
            f"buf.{name}.yaml",
        ],
        tools = {
            "yq": CONFIG.BUF.YQ_TOOL,
            "buf": CONFIG.BUF.BUF_TOOL,
        },
    )

def gen_buf_lock(name: str, srcs:list, pkg:str, visibility:list):
    locs = ' '.join(['buf.yaml'] + [f'$(location {s})' for s in srcs])
    cmd = [
        f"touch buf.yaml",
        "$TOOLS_YQ  ea  -i '. as $item ireduce ({}; . *+ $item )' "+ locs,
        "$TOOLS_YQ -i '.deps |= unique' buf.yaml",
        f'$TOOLS_YQ -i ".name= \\"{pkg}\\"" buf.yaml',
    ]
    return genrule(
        name = name,
        srcs = srcs,
        visibility = visibility,
        cmd = cmd + [
            "$TOOLS_BUF mod update",
            f"mv buf.lock buf.{name}.lock",
        ],
        outs = [
            f"buf.{name}.lock",
        ],
        tools = {
            "yq": CONFIG.BUF.YQ_TOOL,
            "buf": CONFIG.BUF.BUF_TOOL,
        },
    )

    

def buf_dep(name:str, module:str, version:str = "", visibility:list): 
    """
    downloads a single buf dependency from BSR.

    ARGS:
    (name): the name of the rule
    (module): module name on BSR ex: buf.build/acme/units
    (version): optional version added to the module to pin the dep to a specific version.
               ex: if given version = "1c473ad9220a49bca9320f4cc690eba5" we generate: 
               dep = "buf.build/acme/units:1c473ad9220a49bca9320f4cc690eba5"
    """
    dep = f"{module}:{version}" if version else module
    filename = f"{module}_{version}".replace("/", "_").replace(".", "_") + ".txt"
    return filegroup(
        name = name,
        srcs = [],
        visibility = visibility,
        provides = {
            'buf_dependency': gen_buf_dep(f'_{name}#buf_dep', module, version, visibility),
        },
    )

def gen_buf_dep(name:str, module:str, version:str = "", visibility:list): 
    dep = f"{module}:{version}" if version else module
    filename = f"{module}_{version}".replace("/", "_").replace(".", "_") + ".txt"
    return genrule(
        name = name,
        visibility = visibility,
        cmd = [
            f'echo "  - {dep}\n" > _dep_{filename}'
        ],
        outs = [f"_dep_{filename}"],
    ),


def buf_yaml(name:str, bsr_deps:list=[], local_deps:list=[], visibility:list):
    """
    generates a buf yaml for use in buf_image rules.
    
    ARGS:
    (name): name of the rule
    (deps): list of buf_dep targets that go in the "deps:" section in the buf.yaml
    """
    return filegroup(
        name = name,
        provides = {
            "buf_yaml": gen_buf_yaml(f'_{name}#buf_yaml', bsr_deps, local_deps, visibility),
        },
        requires = [
            'buf_dependency',
        ],
    )

def gen_buf_yaml(name:str, bsr_deps:list=[], local_deps:list=[], visibility:list):
    return genrule(
        name = name,
        visibility = visibility,
        srcs = bsr_deps,
        cmd = [
            # concat all bsr_deps together
            #put in yaml
            "$TOOLS_BUF mod update",
        ],
        tools = {
            "buf": CONFIG.BUF.BUF_TOOL,
        },
        outs = ["buf.yaml"]
    )