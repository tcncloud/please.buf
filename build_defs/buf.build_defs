def buf_archive(name:str, srcs:list):
    return genrule(
        name = name,
        srcs = srcs,
        cmd = ["$TOOLS_ARCHTOOL t"],    
        tools = {
            "ARCHTOOL": [CONFIG.ARCAT_TOOL],
        },
        outs = [
            f"{name}.tar.gz",
        ],
        requires = ['buf_image'],
    )


def buf_build(name:str, srcs:list, json=False, deps:list=[], visibility:list):
    return filegroup(
        name = name,
        srcs = srcs,
        visibility = visibility,
        deps = deps,
        provides = {
            'buf_image': buf_image(
                name = f'_{name}#buf_image',
                srcs = srcs,
                json = json,
                deps = deps,
                visibility = visibility,
            ),
        }
    )

def buf_image(name:str, srcs:list, json=False, deps:list=[], visibility:list):
    """
    builds the buf image using `buf build` and includes google protos.
    if json is true we generate a .json output instead of a .bin
    """
    ext = 'json' if json else 'bin'
    bufYaml = genrule(
        name = f'{name}#buf_build',
        tools = {
            "buf": CONFIG.BUF.BUF_TOOL,
        },
        outs = [
            "buf.yaml",
        ],
        cmd = "$TOOLS_BUF mod init",
    )
    outs = f"{name}_buf_image.{ext}".replace("#", "_")
    return genrule(
        name = name,
        srcs = srcs + [
            bufYaml,
        ],
        cmd = [
            f"$TOOLS_BUF build -o {outs}",
        ],
        tools = {
            "buf": CONFIG.BUF.BUF_TOOL,
        },
        outs = [
            outs,
        ],
        labels = [
            f"link:plz-out/gen",
            f"link:.",
        ],
        visibility = visibility,
    )

def buf_breaking(name:str, srcs:list, against:list, visbility:list):
    pass


def buf_toolchain(name:str, revision:str, visibility:list):
    if CONFIG.HOSTOS == "darwin":
        HOSTOS = "Darwin"
    elif CONFIG.HOSTOS == "linux":
        HOSTOS = "Linux"
    elif CONFIG.HOSTOS == "windows":
        HOSTOS = "Windows"
    else:
        HOSTOS = CONFIG.HOSTOS


    if CONFIG.HOSTARCH == "amd64":
        HOSTARCH = "x86_64"
    else:
        HOSTARCH = CONFIG.HOSTARCH

    return remote_file(
        name = name,
        binary =  True,
        url = f"https://github.com/bufbuild/buf/releases/download/{revision}/buf-{HOSTOS}-{HOSTARCH}",
        extract = False,
        visibility = visibility,
    )
